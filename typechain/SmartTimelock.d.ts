/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SmartTimelockInterface extends ethers.utils.Interface {
  functions: {
    "approveTransfer(address)": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "call(address,uint256,bytes)": FunctionFragment;
    "claimEther()": FunctionFragment;
    "claimToken(address)": FunctionFragment;
    "governor()": FunctionFragment;
    "initialize(address,address,address,uint256)": FunctionFragment;
    "release()": FunctionFragment;
    "releaseTime()": FunctionFragment;
    "revokeTransfer(address)": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveTransfer",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimEther",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "claimToken", values: [string]): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "releaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeTransfer",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "approveTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "releaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "ApproveTransfer(address)": EventFragment;
    "Call(address,uint256,bytes,bool)": EventFragment;
    "ClaimEther(uint256)": EventFragment;
    "ClaimToken(address,uint256)": EventFragment;
    "RevokeTransfer(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveTransfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ClaimToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeTransfer"): EventFragment;
}

export class SmartTimelock extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SmartTimelockInterface;

  functions: {
    approveTransfer(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveTransfer(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    "beneficiary()"(overrides?: CallOverrides): Promise<[string]>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    claimEther(overrides?: Overrides): Promise<ContractTransaction>;

    "claimEther()"(overrides?: Overrides): Promise<ContractTransaction>;

    claimToken(
      tokenToClaim: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claimToken(address)"(
      tokenToClaim: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    "governor()"(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address,uint256)"(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    release(overrides?: Overrides): Promise<ContractTransaction>;

    "release()"(overrides?: Overrides): Promise<ContractTransaction>;

    releaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "releaseTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    revokeTransfer(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeTransfer(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;
  };

  approveTransfer(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveTransfer(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  "beneficiary()"(overrides?: CallOverrides): Promise<string>;

  call(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "call(address,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  claimEther(overrides?: Overrides): Promise<ContractTransaction>;

  "claimEther()"(overrides?: Overrides): Promise<ContractTransaction>;

  claimToken(
    tokenToClaim: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claimToken(address)"(
    tokenToClaim: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  governor(overrides?: CallOverrides): Promise<string>;

  "governor()"(overrides?: CallOverrides): Promise<string>;

  initialize(
    token: string,
    beneficiary: string,
    governor: string,
    releaseTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address,uint256)"(
    token: string,
    beneficiary: string,
    governor: string,
    releaseTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  release(overrides?: Overrides): Promise<ContractTransaction>;

  "release()"(overrides?: Overrides): Promise<ContractTransaction>;

  releaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  "releaseTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  revokeTransfer(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeTransfer(address)"(
    to: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    approveTransfer(to: string, overrides?: CallOverrides): Promise<void>;

    "approveTransfer(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    "beneficiary()"(overrides?: CallOverrides): Promise<string>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    claimEther(overrides?: CallOverrides): Promise<void>;

    "claimEther()"(overrides?: CallOverrides): Promise<void>;

    claimToken(tokenToClaim: string, overrides?: CallOverrides): Promise<void>;

    "claimToken(address)"(
      tokenToClaim: string,
      overrides?: CallOverrides
    ): Promise<void>;

    governor(overrides?: CallOverrides): Promise<string>;

    "governor()"(overrides?: CallOverrides): Promise<string>;

    initialize(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address,uint256)"(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    release(overrides?: CallOverrides): Promise<void>;

    "release()"(overrides?: CallOverrides): Promise<void>;

    releaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    "releaseTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeTransfer(to: string, overrides?: CallOverrides): Promise<void>;

    "revokeTransfer(address)"(
      to: string,
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ApproveTransfer(to: null): EventFilter;

    Call(
      to: null,
      value: null,
      data: null,
      transfersAllowed: null
    ): EventFilter;

    ClaimEther(amount: null): EventFilter;

    ClaimToken(token: null, amount: null): EventFilter;

    RevokeTransfer(to: null): EventFilter;
  };

  estimateGas: {
    approveTransfer(to: string, overrides?: Overrides): Promise<BigNumber>;

    "approveTransfer(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    "beneficiary()"(overrides?: CallOverrides): Promise<BigNumber>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    claimEther(overrides?: Overrides): Promise<BigNumber>;

    "claimEther()"(overrides?: Overrides): Promise<BigNumber>;

    claimToken(tokenToClaim: string, overrides?: Overrides): Promise<BigNumber>;

    "claimToken(address)"(
      tokenToClaim: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    "governor()"(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address,uint256)"(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    release(overrides?: Overrides): Promise<BigNumber>;

    "release()"(overrides?: Overrides): Promise<BigNumber>;

    releaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    "releaseTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    revokeTransfer(to: string, overrides?: Overrides): Promise<BigNumber>;

    "revokeTransfer(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    approveTransfer(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveTransfer(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "beneficiary()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    claimEther(overrides?: Overrides): Promise<PopulatedTransaction>;

    "claimEther()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    claimToken(
      tokenToClaim: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claimToken(address)"(
      tokenToClaim: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address,uint256)"(
      token: string,
      beneficiary: string,
      governor: string,
      releaseTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    release(overrides?: Overrides): Promise<PopulatedTransaction>;

    "release()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    releaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "releaseTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeTransfer(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeTransfer(address)"(
      to: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
