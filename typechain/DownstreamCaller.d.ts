/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface DownstreamCallerInterface extends ethers.utils.Interface {
  functions: {
    "addTransaction(address,bytes)": FunctionFragment;
    "executeTransactions()": FunctionFragment;
    "owner()": FunctionFragment;
    "removeTransaction(uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setTransactionEnabled(uint256,bool)": FunctionFragment;
    "transactions(uint256)": FunctionFragment;
    "transactionsSize()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addTransaction",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTransactions",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeTransaction",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setTransactionEnabled",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transactions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionsSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTransactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTransactionEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transactionsSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "TransactionFailed(address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionFailed"): EventFragment;
}

export class DownstreamCaller extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: DownstreamCallerInterface;

  functions: {
    addTransaction(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    executeTransactions(overrides?: Overrides): Promise<ContractTransaction>;

    "executeTransactions()"(
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    removeTransaction(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "removeTransaction(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    setTransactionEnabled(
      index: BigNumberish,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setTransactionEnabled(uint256,bool)"(
      index: BigNumberish,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        enabled: boolean;
        destination: string;
        data: string;
      }
    >;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        enabled: boolean;
        destination: string;
        data: string;
      }
    >;

    transactionsSize(overrides?: CallOverrides): Promise<[BigNumber]>;

    "transactionsSize()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addTransaction(
    destination: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addTransaction(address,bytes)"(
    destination: string,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  executeTransactions(overrides?: Overrides): Promise<ContractTransaction>;

  "executeTransactions()"(overrides?: Overrides): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  removeTransaction(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "removeTransaction(uint256)"(
    index: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  setTransactionEnabled(
    index: BigNumberish,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setTransactionEnabled(uint256,bool)"(
    index: BigNumberish,
    enabled: boolean,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transactions(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      enabled: boolean;
      destination: string;
      data: string;
    }
  >;

  "transactions(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, string] & {
      enabled: boolean;
      destination: string;
      data: string;
    }
  >;

  transactionsSize(overrides?: CallOverrides): Promise<BigNumber>;

  "transactionsSize()"(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    addTransaction(
      destination: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeTransactions(overrides?: CallOverrides): Promise<void>;

    "executeTransactions()"(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    removeTransaction(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeTransaction(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    setTransactionEnabled(
      index: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTransactionEnabled(uint256,bool)"(
      index: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        enabled: boolean;
        destination: string;
        data: string;
      }
    >;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, string] & {
        enabled: boolean;
        destination: string;
        data: string;
      }
    >;

    transactionsSize(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionsSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    TransactionFailed(
      destination: string | null,
      index: null,
      data: null
    ): EventFilter;
  };

  estimateGas: {
    addTransaction(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    executeTransactions(overrides?: Overrides): Promise<BigNumber>;

    "executeTransactions()"(overrides?: Overrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeTransaction(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "removeTransaction(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    setTransactionEnabled(
      index: BigNumberish,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setTransactionEnabled(uint256,bool)"(
      index: BigNumberish,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transactionsSize(overrides?: CallOverrides): Promise<BigNumber>;

    "transactionsSize()"(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addTransaction(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addTransaction(address,bytes)"(
      destination: string,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    executeTransactions(overrides?: Overrides): Promise<PopulatedTransaction>;

    "executeTransactions()"(
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeTransaction(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "removeTransaction(uint256)"(
      index: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    setTransactionEnabled(
      index: BigNumberish,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setTransactionEnabled(uint256,bool)"(
      index: BigNumberish,
      enabled: boolean,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transactions(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactions(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transactionsSize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "transactionsSize()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
