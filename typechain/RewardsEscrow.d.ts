/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface RewardsEscrowInterface extends ethers.utils.Interface {
  functions: {
    "approveRecipient(address)": FunctionFragment;
    "call(address,uint256,bytes)": FunctionFragment;
    "initialize()": FunctionFragment;
    "isApproved(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "revokeRecipient(address)": FunctionFragment;
    "signalTokenLock(address,address,uint256,uint256,uint256)": FunctionFragment;
    "transfer(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "approveRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isApproved", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalTokenLock",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "approveRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isApproved", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalTokenLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "Approve(address)": EventFragment;
    "Call(address,uint256,bytes)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RevokeApproval(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approve"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Call"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RevokeApproval"): EventFragment;
}

export class RewardsEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: RewardsEscrowInterface;

  functions: {
    approveRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    initialize(overrides?: Overrides): Promise<ContractTransaction>;

    "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

    isApproved(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

    revokeRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signalTokenLock(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "signalTokenLock(address,address,uint256,uint256,uint256)"(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transfer(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transfer(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  approveRecipient(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveRecipient(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  call(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "call(address,uint256,bytes)"(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  initialize(overrides?: Overrides): Promise<ContractTransaction>;

  "initialize()"(overrides?: Overrides): Promise<ContractTransaction>;

  isApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isApproved(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(overrides?: Overrides): Promise<ContractTransaction>;

  "renounceOwnership()"(overrides?: Overrides): Promise<ContractTransaction>;

  revokeRecipient(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRecipient(address)"(
    recipient: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signalTokenLock(
    geyser: string,
    token: string,
    amount: BigNumberish,
    durationSec: BigNumberish,
    startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "signalTokenLock(address,address,uint256,uint256,uint256)"(
    geyser: string,
    token: string,
    amount: BigNumberish,
    durationSec: BigNumberish,
    startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transfer(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transfer(address,address,uint256)"(
    token: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    approveRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    "initialize()"(overrides?: CallOverrides): Promise<void>;

    isApproved(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    revokeRecipient(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRecipient(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalTokenLock(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "signalTokenLock(address,address,uint256,uint256,uint256)"(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transfer(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "transfer(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Approve(recipient: null): EventFilter;

    Call(to: null, value: null, data: null): EventFilter;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): EventFilter;

    RevokeApproval(recipient: null): EventFilter;
  };

  estimateGas: {
    approveRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides): Promise<BigNumber>;

    "initialize()"(overrides?: Overrides): Promise<BigNumber>;

    isApproved(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides): Promise<BigNumber>;

    "renounceOwnership()"(overrides?: Overrides): Promise<BigNumber>;

    revokeRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signalTokenLock(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "signalTokenLock(address,address,uint256,uint256,uint256)"(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transfer(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transfer(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    approveRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    call(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "call(address,uint256,bytes)"(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    initialize(overrides?: Overrides): Promise<PopulatedTransaction>;

    "initialize()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    isApproved(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isApproved(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides): Promise<PopulatedTransaction>;

    "renounceOwnership()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    revokeRecipient(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRecipient(address)"(
      recipient: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signalTokenLock(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "signalTokenLock(address,address,uint256,uint256,uint256)"(
      geyser: string,
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transfer(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transfer(address,address,uint256)"(
      token: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
