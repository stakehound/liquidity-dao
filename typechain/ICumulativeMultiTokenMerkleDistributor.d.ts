/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import { Contract, ContractTransaction } from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ICumulativeMultiTokenMerkleDistributorInterface
  extends ethers.utils.Interface {
  functions: {};

  events: {
    "Claimed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "InsufficientFundsForRoot(bytes32)": EventFragment;
    "RootProposed(uint256,bytes32,bytes32,uint256,uint256)": EventFragment;
    "RootUpdated(uint256,bytes32,bytes32,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsufficientFundsForRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootUpdated"): EventFragment;
}

export class ICumulativeMultiTokenMerkleDistributor extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ICumulativeMultiTokenMerkleDistributorInterface;

  functions: {};

  callStatic: {};

  filters: {
    Claimed(
      user: string | null,
      token: string | null,
      amount: null,
      cycle: BigNumberish | null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;

    InsufficientFundsForRoot(root: BytesLike | null): EventFilter;

    RootProposed(
      cycle: BigNumberish | null,
      root: BytesLike | null,
      contentHash: BytesLike | null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;

    RootUpdated(
      cycle: BigNumberish | null,
      root: BytesLike | null,
      contentHash: BytesLike | null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
