/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface StakehoundGeyserInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "MAX_PERCENTAGE()": FunctionFragment;
    "TOKEN_LOCKER_ROLE()": FunctionFragment;
    "addDistributionToken(address)": FunctionFragment;
    "clearSchedules(address)": FunctionFragment;
    "getDistributionTokens()": FunctionFragment;
    "getNumDistributionTokens()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "getStakingToken()": FunctionFragment;
    "getUnlockSchedulesFor(address)": FunctionFragment;
    "globalStartTime()": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,uint256,address,address)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "signalTokenLock(address,uint256,uint256,uint256)": FunctionFragment;
    "stake(uint256,bytes)": FunctionFragment;
    "stakeFor(address,uint256,bytes)": FunctionFragment;
    "supportsHistory()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "totalStakedFor(address)": FunctionFragment;
    "unlockScheduleCount(address)": FunctionFragment;
    "unlockSchedules(address,uint256)": FunctionFragment;
    "unstake(uint256,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PERCENTAGE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_LOCKER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addDistributionToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "clearSchedules",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDistributionTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNumDistributionTokens",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakingToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUnlockSchedulesFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "globalStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "signalTokenLock",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsHistory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStakedFor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockScheduleCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockSchedules",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PERCENTAGE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_LOCKER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addDistributionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDistributionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumDistributionTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnlockSchedulesFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "globalStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signalTokenLock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalStakedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockScheduleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unlockSchedules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;

  events: {
    "ClearSchedules(address,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Staked(address,uint256,uint256,uint256)": EventFragment;
    "UnlockScheduleSet(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "Unstaked(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ClearSchedules"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockScheduleSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
}

export class StakehoundGeyser extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: StakehoundGeyserInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<[BigNumber]>;

    "MAX_PERCENTAGE()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    TOKEN_LOCKER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "TOKEN_LOCKER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    addDistributionToken(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "addDistributionToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    clearSchedules(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "clearSchedules(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    getDistributionTokens(overrides?: CallOverrides): Promise<[string[]]>;

    "getDistributionTokens()"(overrides?: CallOverrides): Promise<[string[]]>;

    getNumDistributionTokens(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getNumDistributionTokens()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getStakingToken(overrides?: CallOverrides): Promise<[string]>;

    "getStakingToken()"(overrides?: CallOverrides): Promise<[string]>;

    getUnlockSchedulesFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber] & {
          sharesLocked: BigNumber;
          endAtSec: BigNumber;
          durationSec: BigNumber;
          startTime: BigNumber;
        })[]
      ]
    >;

    "getUnlockSchedulesFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [
        ([BigNumber, BigNumber, BigNumber, BigNumber] & {
          sharesLocked: BigNumber;
          endAtSec: BigNumber;
          durationSec: BigNumber;
          startTime: BigNumber;
        })[]
      ]
    >;

    globalStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "globalStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,uint256,address,address)"(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    signalTokenLock(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "signalTokenLock(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "stakeFor(address,uint256,bytes)"(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    supportsHistory(overrides?: CallOverrides): Promise<[boolean]>;

    "supportsHistory()"(overrides?: CallOverrides): Promise<[boolean]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStaked()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockScheduleCount(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "unlockScheduleCount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sharesLocked: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
        startTime: BigNumber;
      }
    >;

    "unlockSchedules(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sharesLocked: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
        startTime: BigNumber;
      }
    >;

    unstake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unstake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

  "MAX_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

  TOKEN_LOCKER_ROLE(overrides?: CallOverrides): Promise<string>;

  "TOKEN_LOCKER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  addDistributionToken(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "addDistributionToken(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  clearSchedules(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "clearSchedules(address)"(
    token: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  getDistributionTokens(overrides?: CallOverrides): Promise<string[]>;

  "getDistributionTokens()"(overrides?: CallOverrides): Promise<string[]>;

  getNumDistributionTokens(overrides?: CallOverrides): Promise<BigNumber>;

  "getNumDistributionTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getStakingToken(overrides?: CallOverrides): Promise<string>;

  "getStakingToken()"(overrides?: CallOverrides): Promise<string>;

  getUnlockSchedulesFor(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber] & {
      sharesLocked: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      startTime: BigNumber;
    })[]
  >;

  "getUnlockSchedulesFor(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<
    ([BigNumber, BigNumber, BigNumber, BigNumber] & {
      sharesLocked: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      startTime: BigNumber;
    })[]
  >;

  globalStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "globalStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    stakingToken_: string,
    globalStartTime_: BigNumberish,
    initialAdmin_: string,
    initialTokenLocker_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,uint256,address,address)"(
    stakingToken_: string,
    globalStartTime_: BigNumberish,
    initialAdmin_: string,
    initialTokenLocker_: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  signalTokenLock(
    token: string,
    amount: BigNumberish,
    durationSec: BigNumberish,
    startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "signalTokenLock(address,uint256,uint256,uint256)"(
    token: string,
    amount: BigNumberish,
    durationSec: BigNumberish,
    startTime: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stake(uint256,bytes)"(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  stakeFor(
    user: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "stakeFor(address,uint256,bytes)"(
    user: string,
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  supportsHistory(overrides?: CallOverrides): Promise<boolean>;

  "supportsHistory()"(overrides?: CallOverrides): Promise<boolean>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

  totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalStakedFor(address)"(
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockScheduleCount(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "unlockScheduleCount(address)"(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unlockSchedules(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      sharesLocked: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      startTime: BigNumber;
    }
  >;

  "unlockSchedules(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      sharesLocked: BigNumber;
      endAtSec: BigNumber;
      durationSec: BigNumber;
      startTime: BigNumber;
    }
  >;

  unstake(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unstake(uint256,bytes)"(
    amount: BigNumberish,
    data: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LOCKER_ROLE(overrides?: CallOverrides): Promise<string>;

    "TOKEN_LOCKER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    addDistributionToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addDistributionToken(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    clearSchedules(token: string, overrides?: CallOverrides): Promise<void>;

    "clearSchedules(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getDistributionTokens(overrides?: CallOverrides): Promise<string[]>;

    "getDistributionTokens()"(overrides?: CallOverrides): Promise<string[]>;

    getNumDistributionTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumDistributionTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingToken(overrides?: CallOverrides): Promise<string>;

    "getStakingToken()"(overrides?: CallOverrides): Promise<string>;

    getUnlockSchedulesFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber] & {
        sharesLocked: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
        startTime: BigNumber;
      })[]
    >;

    "getUnlockSchedulesFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<
      ([BigNumber, BigNumber, BigNumber, BigNumber] & {
        sharesLocked: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
        startTime: BigNumber;
      })[]
    >;

    globalStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "globalStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,uint256,address,address)"(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signalTokenLock(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "signalTokenLock(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "stakeFor(address,uint256,bytes)"(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsHistory(overrides?: CallOverrides): Promise<boolean>;

    "supportsHistory()"(overrides?: CallOverrides): Promise<boolean>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockScheduleCount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockScheduleCount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sharesLocked: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
        startTime: BigNumber;
      }
    >;

    "unlockSchedules(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        sharesLocked: BigNumber;
        endAtSec: BigNumber;
        durationSec: BigNumber;
        startTime: BigNumber;
      }
    >;

    unstake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "unstake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    ClearSchedules(token: null, timestamp: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    Staked(
      user: string | null,
      shares: null,
      total: null,
      timestamp: BigNumberish | null
    ): EventFilter;

    UnlockScheduleSet(
      token: null,
      sharesLocked: null,
      durationSec: null,
      startTime: null,
      endTime: null,
      timestamp: BigNumberish | null
    ): EventFilter;

    Unstaked(
      user: string | null,
      shares: null,
      total: null,
      timestamp: BigNumberish | null
    ): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<BigNumber>;

    "MAX_PERCENTAGE()"(overrides?: CallOverrides): Promise<BigNumber>;

    TOKEN_LOCKER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "TOKEN_LOCKER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    addDistributionToken(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "addDistributionToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    clearSchedules(token: string, overrides?: Overrides): Promise<BigNumber>;

    "clearSchedules(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    getDistributionTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getDistributionTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getNumDistributionTokens(overrides?: CallOverrides): Promise<BigNumber>;

    "getNumDistributionTokens()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStakingToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getStakingToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUnlockSchedulesFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getUnlockSchedulesFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "globalStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,uint256,address,address)"(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    signalTokenLock(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "signalTokenLock(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "stakeFor(address,uint256,bytes)"(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    supportsHistory(overrides?: CallOverrides): Promise<BigNumber>;

    "supportsHistory()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStaked()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalStakedFor(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockScheduleCount(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockScheduleCount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlockSchedules(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unstake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_PERCENTAGE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "MAX_PERCENTAGE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TOKEN_LOCKER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "TOKEN_LOCKER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addDistributionToken(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "addDistributionToken(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    clearSchedules(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "clearSchedules(address)"(
      token: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    getDistributionTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDistributionTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumDistributionTokens(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getNumDistributionTokens()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getStakingToken()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUnlockSchedulesFor(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getUnlockSchedulesFor(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "globalStartTime()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,uint256,address,address)"(
      stakingToken_: string,
      globalStartTime_: BigNumberish,
      initialAdmin_: string,
      initialTokenLocker_: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    signalTokenLock(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "signalTokenLock(address,uint256,uint256,uint256)"(
      token: string,
      amount: BigNumberish,
      durationSec: BigNumberish,
      startTime: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    stakeFor(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "stakeFor(address,uint256,bytes)"(
      user: string,
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    supportsHistory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "supportsHistory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStaked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStakedFor(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalStakedFor(address)"(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockScheduleCount(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockScheduleCount(address)"(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unlockSchedules(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "unlockSchedules(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unstake(uint256,bytes)"(
      amount: BigNumberish,
      data: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
