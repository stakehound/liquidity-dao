/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import { Contract, ContractFactory, Overrides } from "@ethersproject/contracts";

import type { MerkleMock } from "../MerkleMock";

export class MerkleMock__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(overrides?: Overrides): Promise<MerkleMock> {
    return super.deploy(overrides || {}) as Promise<MerkleMock>;
  }
  getDeployTransaction(overrides?: Overrides): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleMock {
    return super.attach(address) as MerkleMock;
  }
  connect(signer: Signer): MerkleMock__factory {
    return super.connect(signer) as MerkleMock__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleMock {
    return new Contract(address, _abi, signerOrProvider) as MerkleMock;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610216806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80635a9a49c714610030575b600080fd5b6100bb6004803603606081101561004657600080fd5b810190808035906020019064010000000081111561006357600080fd5b82018360208201111561007557600080fd5b8035906020019184602083028401116401000000008311171561009757600080fd5b909192939192939080359060200190929190803590602001909291905050506100d3565b60405180821515815260200191505060405180910390f35b6000610121858580806020026020016040519081016040528093929190818152602001838360200280828437600081840152601f19601f82011690508083019250505050505050848461012b565b9050949350505050565b60008082905060005b85518110156101d257600086828151811061014b57fe5b6020026020010151905080831161019257828160405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092506101c4565b808360405160200180838152602001828152602001925050506040516020818303038152906040528051906020012092505b508080600101915050610134565b50838114915050939250505056fea2646970667358221220d8dff17fdbc1a2a42606434ea557d3f0150395e4c3c5bea0498d4466cb89976964736f6c634300060c0033";
