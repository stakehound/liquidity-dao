/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface MultiplexerInterface extends ethers.utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "PAUSER_ROLE()": FunctionFragment;
    "ROOT_PROPOSER_ROLE()": FunctionFragment;
    "ROOT_VALIDATOR_ROLE()": FunctionFragment;
    "UNPAUSER_ROLE()": FunctionFragment;
    "approveRoot(bytes32,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "claim(address[],uint256[],uint256,bytes32[])": FunctionFragment;
    "claimed(address,address)": FunctionFragment;
    "encodeClaim(address[],uint256[],address,uint256,uint256)": FunctionFragment;
    "getClaimedFor(address,address[])": FunctionFragment;
    "getCurrentMerkleData()": FunctionFragment;
    "getPendingMerkleData()": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasPendingRoot()": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address)": FunctionFragment;
    "lastProposedMerkleData()": FunctionFragment;
    "lastPublishedMerkleData()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposeRoot(bytes32,bytes32,uint256,uint256,uint256)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "totalClaimed(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_PROPOSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ROOT_VALIDATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UNPAUSER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approveRoot",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "claim",
    values: [string[], BigNumberish[], BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "claimed",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "encodeClaim",
    values: [string[], BigNumberish[], string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimedFor",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentMerkleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingMerkleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProposedMerkleData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastPublishedMerkleData",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeRoot",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "totalClaimed",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_PROPOSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ROOT_VALIDATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UNPAUSER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claim", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "encodeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimedFor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentMerkleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendingMerkleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastProposedMerkleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPublishedMerkleData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "Claimed(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "InsufficientFundsForRoot(bytes32)": EventFragment;
    "Paused(address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "RootProposed(uint256,bytes32,bytes32,uint256,uint256)": EventFragment;
    "RootUpdated(uint256,bytes32,bytes32,uint256,uint256)": EventFragment;
    "RootValidated(uint256,bytes32,bytes32,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Claimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InsufficientFundsForRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootValidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export class Multiplexer extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: MultiplexerInterface;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    ROOT_PROPOSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ROOT_PROPOSER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    ROOT_VALIDATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "ROOT_VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<[string]>;

    "UNPAUSER_ROLE()"(overrides?: CallOverrides): Promise<[string]>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "approveRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "claim(address[],uint256[],uint256,bytes32[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    "encodeClaim(address[],uint256[],address,uint256,uint256)"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getCurrentMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          root: string;
          contentHash: string;
          cycle: BigNumber;
          startBlock: BigNumber;
          endBlock: BigNumber;
          uploadBlock: BigNumber;
        }
      ]
    >;

    "getCurrentMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          root: string;
          contentHash: string;
          cycle: BigNumber;
          startBlock: BigNumber;
          endBlock: BigNumber;
          uploadBlock: BigNumber;
        }
      ]
    >;

    getPendingMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          root: string;
          contentHash: string;
          cycle: BigNumber;
          startBlock: BigNumber;
          endBlock: BigNumber;
          uploadBlock: BigNumber;
        }
      ]
    >;

    "getPendingMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
          root: string;
          contentHash: string;
          cycle: BigNumber;
          startBlock: BigNumber;
          endBlock: BigNumber;
          uploadBlock: BigNumber;
        }
      ]
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    hasPendingRoot(overrides?: CallOverrides): Promise<[boolean]>;

    "hasPendingRoot()"(overrides?: CallOverrides): Promise<[boolean]>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "initialize(address,address,address)"(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lastProposedMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    "lastProposedMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    lastPublishedMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    "lastPublishedMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    pause(overrides?: Overrides): Promise<ContractTransaction>;

    "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "proposeRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    unpause(overrides?: Overrides): Promise<ContractTransaction>;

    "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

  PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ROOT_PROPOSER_ROLE(overrides?: CallOverrides): Promise<string>;

  "ROOT_PROPOSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  ROOT_VALIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  "ROOT_VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

  UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

  "UNPAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

  approveRoot(
    root: BytesLike,
    contentHash: BytesLike,
    cycle: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "approveRoot(bytes32,bytes32,uint256,uint256,uint256)"(
    root: BytesLike,
    contentHash: BytesLike,
    cycle: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claim(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    cycle: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "claim(address[],uint256[],uint256,bytes32[])"(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    cycle: BigNumberish,
    merkleProof: BytesLike[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  claimed(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "claimed(address,address)"(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  encodeClaim(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    account: string,
    index: BigNumberish,
    cycle: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { encoded: string; hash: string }>;

  "encodeClaim(address[],uint256[],address,uint256,uint256)"(
    tokens: string[],
    cumulativeAmounts: BigNumberish[],
    account: string,
    index: BigNumberish,
    cycle: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { encoded: string; hash: string }>;

  getClaimedFor(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  "getClaimedFor(address,address[])"(
    user: string,
    tokens: string[],
    overrides?: CallOverrides
  ): Promise<[string[], BigNumber[]]>;

  getCurrentMerkleData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  "getCurrentMerkleData()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  getPendingMerkleData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  "getPendingMerkleData()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  "getRoleAdmin(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getRoleMember(bytes32,uint256)"(
    role: BytesLike,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getRoleMemberCount(bytes32)"(
    role: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "grantRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  hasPendingRoot(overrides?: CallOverrides): Promise<boolean>;

  "hasPendingRoot()"(overrides?: CallOverrides): Promise<boolean>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "hasRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    admin: string,
    initialProposer: string,
    initialValidator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "initialize(address,address,address)"(
    admin: string,
    initialProposer: string,
    initialValidator: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lastProposedMerkleData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  "lastProposedMerkleData()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  lastPublishedMerkleData(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  "lastPublishedMerkleData()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      root: string;
      contentHash: string;
      cycle: BigNumber;
      startBlock: BigNumber;
      endBlock: BigNumber;
      uploadBlock: BigNumber;
    }
  >;

  pause(overrides?: Overrides): Promise<ContractTransaction>;

  "pause()"(overrides?: Overrides): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  proposeRoot(
    root: BytesLike,
    contentHash: BytesLike,
    cycle: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "proposeRoot(bytes32,bytes32,uint256,uint256,uint256)"(
    root: BytesLike,
    contentHash: BytesLike,
    cycle: BigNumberish,
    startBlock: BigNumberish,
    endBlock: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "renounceRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "revokeRole(bytes32,address)"(
    role: BytesLike,
    account: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "totalClaimed(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  unpause(overrides?: Overrides): Promise<ContractTransaction>;

  "unpause()"(overrides?: Overrides): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<string>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ROOT_PROPOSER_ROLE(overrides?: CallOverrides): Promise<string>;

    "ROOT_PROPOSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    ROOT_VALIDATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    "ROOT_VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<string>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<string>;

    "UNPAUSER_ROLE()"(overrides?: CallOverrides): Promise<string>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "approveRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    "claim(address[],uint256[],uint256,bytes32[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    "encodeClaim(address[],uint256[],address,uint256,uint256)"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { encoded: string; hash: string }>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<[string[], BigNumber[]]>;

    getCurrentMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    "getCurrentMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    getPendingMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    "getPendingMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasPendingRoot(overrides?: CallOverrides): Promise<boolean>;

    "hasPendingRoot()"(overrides?: CallOverrides): Promise<boolean>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "initialize(address,address,address)"(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    lastProposedMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    "lastProposedMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    lastPublishedMerkleData(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    "lastPublishedMerkleData()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        root: string;
        contentHash: string;
        cycle: BigNumber;
        startBlock: BigNumber;
        endBlock: BigNumber;
        uploadBlock: BigNumber;
      }
    >;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "proposeRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Claimed(
      user: string | null,
      token: string | null,
      amount: null,
      cycle: BigNumberish | null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;

    InsufficientFundsForRoot(root: BytesLike | null): EventFilter;

    Paused(account: null): EventFilter;

    RoleAdminChanged(
      role: BytesLike | null,
      previousAdminRole: BytesLike | null,
      newAdminRole: BytesLike | null
    ): EventFilter;

    RoleGranted(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RoleRevoked(
      role: BytesLike | null,
      account: string | null,
      sender: string | null
    ): EventFilter;

    RootProposed(
      cycle: null,
      root: null,
      contentHash: null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;

    RootUpdated(
      cycle: BigNumberish | null,
      root: BytesLike | null,
      contentHash: BytesLike | null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;

    RootValidated(
      cycle: null,
      root: null,
      contentHash: null,
      timestamp: null,
      blockNumber: null
    ): EventFilter;

    Unpaused(account: null): EventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "DEFAULT_ADMIN_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_PROPOSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT_PROPOSER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT_VALIDATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "ROOT_VALIDATOR_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    "UNPAUSER_ROLE()"(overrides?: CallOverrides): Promise<BigNumber>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "approveRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "claim(address[],uint256[],uint256,bytes32[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "encodeClaim(address[],uint256[],address,uint256,uint256)"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    "getCurrentMerkleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPendingMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    "getPendingMerkleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    hasPendingRoot(overrides?: CallOverrides): Promise<BigNumber>;

    "hasPendingRoot()"(overrides?: CallOverrides): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "initialize(address,address,address)"(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lastProposedMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    "lastProposedMerkleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastPublishedMerkleData(overrides?: CallOverrides): Promise<BigNumber>;

    "lastPublishedMerkleData()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides): Promise<BigNumber>;

    "pause()"(overrides?: Overrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "proposeRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<BigNumber>;

    totalClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides): Promise<BigNumber>;

    "unpause()"(overrides?: Overrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "DEFAULT_ADMIN_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PAUSER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT_PROPOSER_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROOT_PROPOSER_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ROOT_VALIDATOR_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ROOT_VALIDATOR_ROLE()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UNPAUSER_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "UNPAUSER_ROLE()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approveRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "approveRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "claim(address[],uint256[],uint256,bytes32[])"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      cycle: BigNumberish,
      merkleProof: BytesLike[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    claimed(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "claimed(address,address)"(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    encodeClaim(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "encodeClaim(address[],uint256[],address,uint256,uint256)"(
      tokens: string[],
      cumulativeAmounts: BigNumberish[],
      account: string,
      index: BigNumberish,
      cycle: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimedFor(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getClaimedFor(address,address[])"(
      user: string,
      tokens: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentMerkleData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getCurrentMerkleData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingMerkleData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingMerkleData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleAdmin(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMember(bytes32,uint256)"(
      role: BytesLike,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getRoleMemberCount(bytes32)"(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "grantRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    hasPendingRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "hasPendingRoot()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "hasRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "initialize(address,address,address)"(
      admin: string,
      initialProposer: string,
      initialValidator: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lastProposedMerkleData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastProposedMerkleData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPublishedMerkleData(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastPublishedMerkleData()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "pause()"(overrides?: Overrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRoot(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "proposeRoot(bytes32,bytes32,uint256,uint256,uint256)"(
      root: BytesLike,
      contentHash: BytesLike,
      cycle: BigNumberish,
      startBlock: BigNumberish,
      endBlock: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "renounceRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "revokeRole(bytes32,address)"(
      role: BytesLike,
      account: string,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    totalClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalClaimed(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides): Promise<PopulatedTransaction>;

    "unpause()"(overrides?: Overrides): Promise<PopulatedTransaction>;
  };
}
